# Environments
# ============
#
# Labels
# ------
#
# In increasing level of integration:
# * lint: Lint all the things!
# * test: Run all tests on code, run pytest on stdlib examples.
# * meta; Integration tests - run as plugin and command against code and examples.
#
# Additional:
# * docs: Emulate doc build on RTD.
#
# Cheat-sheet
# -----------
#
# * When updating this file, check all default environments have a description:
#   ``tox l``. Check a label's envs: ``tox l -m examples``.

[tox]
envlist =
    py3{7,8,9,10,11}-lint_{code,examples}
    py3{7,8,9,10,11}-test_{code,examples}
    py3{7,8,9,10,11}-meta_{plugin,command}
    py310-docs

[testenv]
setenv =
    PYTHONWARNINGS = default
    TOXDIR = {envdir}

# === Env commands ===

# --- LINT: code ---
# Regular linting of code: flake8, yapf, mypy, etc.
[testenv:py3{7,8,9,10,11}-lint_code]
description = ⛏️ Regular linting of code: Flake8, yapf, mypy, etc.
labels =
    lint
    lint_code
deps =
    -rrequirements/test.txt
skip_install = true
commands =
    make lint
allowlist_externals =
    make

# --- LINT: examples ---
# Lint all good and bad examples. Includes linting with vanilla Flake8 and
# assert tests formatted with Black pass.
[testenv:py37-lint_examples]
description = ⛏️ Lint examples, run stdlib examples on Pytest
labels =
    lint
    lint_examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    make lintexamples
allowlist_externals =
    make

# Extra checks on Python 3.8 (and later) files
# Future work: Merge with above in #198
[testenv:py3{8,9,10,11}-lint_examples]
description = {[testenv:py37-lint_examples]description}
labels =
    lint
    lint_examples
deps = {[testenv:py37-lint_examples]deps}
skip_install = true
commands =
    {[testenv:py37-lint_examples]commands}
    make lintexamplespy38
allowlist_externals =
    make

# --- TEST: code ---
# Run Pytest on all code
[testenv:py3{7,8,9,10,11}-test_code]
description = 🧰 Test all code
labels =
    test
    test_code
deps =
    -rrequirements/test.txt
commands =
    pytest {posargs:tests}

# --- TEST: Examples ---
# All stdlib examples executed with vanilla Pytest.
[testenv:py37-test_examples]
description = 🧰 Test stdlib examples on py37
labels =
    test
    test_examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    pytest \
        examples/good/test_comments.py \
        examples/good/test_with_statement.py \
        examples/good/test_with_statement_unittest.py \
        examples/bad/file_pattern_test.py \
        examples/bad/test_aaa03.py \
        examples/bad/test_aaa03_04.py \
        examples/bad/test_aaa04.py \
        examples/bad/test_aaa06.py

# Extra checks on Python 3.8 (and later) files
# Future work: Merge with above in #198
[testenv:py3{8,9,10,11}-test_examples]
description = 🧰 Test stdlib examples on py38+
labels =
    test
    test_examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    {[testenv:py37-test_examples]commands}
    pytest examples/good_py38/test_assignment_operator.py

# --- META: plugin ---
# Run as plugin to lint Flake8-AAA's own tests (dog fooding), and also lint all
# good and bad examples. Bad examples generate expected errors.
[testenv:py3{7,8,9,10,11}-meta_plugin]
description = 🎈 Run -m flake_aaa against examples and tests.
labels =
    meta
    meta_plugin
deps =
    flake8>=4
commands =
    flake8 tests
    flake8 examples/good
    - bash -c "flake8 examples/bad/ | sort > {envtmpdir}/out"
    - bash -c "sort examples/bad/bad_expected.out > {envtmpdir}/expected_out"
    diff {envtmpdir}/out {envtmpdir}/expected_out
allowlist_externals =
    bash
    diff

# --- META: command ---
# Run `... -m flake8_aaa`) on all example files. Check errors from bad examples
# are as expected.
[testenv:py3{7,8,9,10,11}-meta_command]
description = 🎈 Run command "-m flake8_aaa" on all examples
labels =
    meta
    meta_cmd
commands =
    make cmd
    make cmdbad
allowlist_externals =
    make

# --- Docs ---
[testenv:py310-docs]
description = 📕 Emulate the documentation build on RTD using Python 3.10
deps =
    -rrequirements/docs.txt
commands =
    make docs
allowlist_externals =
    make

# --- Mappings for GitHub actions ---

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
