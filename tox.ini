# Environments
# ============

# Cheat-sheet:

# * Run all checks on examples: ``tox p -m examples``

# * When updating this file, check all default environments have a description:
#   ``tox l``. Check a label's envs: ``tox l -m examples``.

# * cmdbad
#       Run all bad examples through command line interface and ensure an error
#       code is returned for every one.
# * install
# * lint
#       "Internal" linting and formatting on the codebase and tests. Not run
#       with Flake8-aaa installed (that happens in "install" env). Does not
#       check examples (that happens in "examples" and "examples_aaa" envs).
# * test
#       Run pytest on test suite.
# 
# lint
# lint-examples
# lint-self
# test
# test-examples
# command
# command-examples  (good and bad)
# 
# docs

[tox]
envlist =
    py3{7,8,9,10,11}-{install,lint,examples,examples_aaa,test,command,command_bad}
    py310-docs

[testenv]
install_command = pip install --index-url=http://localhost:3141/root/pypi/+simple/ {packages}

deps =
    lint: -rrequirements/test.txt
    test: -rrequirements/test.txt
commands =
    cmdbad: make cmdbad
    lint: make lint
    test: pytest {posargs:tests}
skip_install =
    lint: true
setenv =
    PYTHONWARNINGS = default
    TOXDIR = {envdir}
allowlist_externals =
    bash
    diff
    make

# === Env commands ===

# --- Lint: self ---
# Check plugin can be installed with and run by Flake8. Flake8-AAA is used as a
# plugin to lint Flake8-aaa's tests (dog fooding).
[testenv:py3{7,8,9,10,11}-lint_self]
description = ðŸŽˆ Run Flake8-AAA against /tests
labels =
    lint
    lint_self
deps =
    flake8>=4
commands =
    flake8 --version
    flake8 tests

# --- CMD ---
# Run the command line interface (`python -m flake8_aaa`) on all good example
# files. Expect no errors and no non-zero error codes.
[testenv:py3{7,8,9,10,11}-command]
description = ðŸ’¡ Run command "-m flake8_aaa" on all good examples
commands =
    cmd: make cmd

# --- Docs ---
[testenv:py310-docs]
description = ðŸ“• Emulate the documentation build on RTD using Python 3.10
deps =
    -rrequirements/docs.txt
commands =
    make docs

# --- Examples ---
# Lint all good and bad examples. Includes linting with vanilla Flake8 and
# assert tests formatted with Black pass. All stdlib examples executed with
# vanilla Pytest.
[testenv:py37-examples]
description = ðŸ§° Lint examples, run stdlib examples on Pytest
labels = examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    make lintexamples
    pytest \
        examples/good/test_comments.py \
        examples/good/test_with_statement.py \
        examples/good/test_with_statement_unittest.py \
        examples/bad/test_aaa03.py \
        examples/bad/test_aaa03_04.py \
        examples/bad/test_aaa04.py \
        examples/bad/test_aaa06.py

# Extra checks on Python 3.8 (and later) files
# Future work: Merge with above in #198
[testenv:py3{8,9,10,11}-examples]
description = {[testenv:py37-examples]description}
labels = examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    {[testenv:py37-examples]commands}
    make lintexamplespy38
    pytest examples/good_py38/test_assignment_operator.py

# --- Examples AAA ---
# Ensures that all examples work against Flake8-AAA as expected. Good examples
# are green. Bad examples are linted and the output asserted to match expected.
[testenv:py3{7,8,9,10,11}-examples_aaa]
description = ðŸ§° Check good examples pass Flake8-AAA and bad examples generate expected errors
labels = examples
deps =
    flake8>=4
commands =
    flake8 --version
    flake8 examples/good
    - bash -c "flake8 examples/bad/ | sort > {envtmpdir}/out"
    - bash -c "sort examples/bad/bad_expected.out > {envtmpdir}/expected_out"
    diff {envtmpdir}/out {envtmpdir}/expected_out

# --- Mappings for GitHub actions ---

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
