# Environments
# ============
#
# Cheat-sheet:
# * Run all checks on examples: ``tox p -m examples``
# * When updating this file, check all default environments have a description:
#   ``tox l``
# 
# * cmd
#       Run the command line interface (`python -m flake8_aaa`) on all good
#       example files. Expect no errors and no non-zero error codes.
# * cmdbad
#       Run all bad examples through command line interface and ensure an error
#       code is returned for every one.
# * install
# * lint
#       "Internal" linting and formatting on the codebase and tests. Not run
#       with Flake8-aaa installed (that happens in "install" env). Does not
#       check examples (that happens in "examples" and "examples_aaa" envs).
# * test
#       Run pytest on test suite.

[tox]
envlist =
    py3{7,8,9,10,11}-{install,lint,examples,examples_aaa,test,cmd,cmdbad}
    py310-docs

[testenv]
deps =
    install: flake8>=4
    lint: -rrequirements/test.txt
    test: -rrequirements/test.txt
commands =
    cmd: make cmd
    cmdbad: make cmdbad
    lint: make lint
    test: pytest {posargs:tests}
skip_install =
    lint: true
setenv =
    PYTHONWARNINGS = default
    TOXDIR = {envdir}
allowlist_externals =
    bash
    diff
    make

# === Env commands ===

# --- Docs ---
[testenv:py310-docs]
description = Emulate the documentation build on RTD using Python 3.10
deps =
    -rrequirements/docs.txt
commands =
    make docs

# --- Examples ---
# Check all examples, good and bad. Includes linting with vanilla Flake8 and
# assert tests formatted with Black pass. All (working) examples executed with
# vanilla Pytest.
[testenv:py37-examples]
description = Check examples pass lint and (some) run with pytest
labels = examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    make lintexamples
    pytest \
        examples/good/test_comments.py \
        examples/good/test_with_statement.py \
        examples/good/test_with_statement_unittest.py \
        examples/bad/test_aaa03.py \
        examples/bad/test_aaa03_04.py \
        examples/bad/test_aaa04.py \
        examples/bad/test_aaa06.py

# Extra checks on Python 3.8 (and later) files
# Future work: Merge with above in #198
[testenv:py3{8,9,10,11}-examples]
description = {[testenv:py37-examples]description}
labels = examples
deps =
    -rrequirements/examples.txt
skip_install = true
commands =
    {[testenv:py37-examples]commands}
    make lintexamplespy38
    pytest examples/good_py38/test_assignment_operator.py

# --- Examples AAA ---
# Ensures that all examples work against Flake8-AAA as expected. Good examples
# are green. Bad examples are linted and the output asserted to match expected.
[testenv:py3{7,8,9,10,11}-examples_aaa]
description = Check good examples pass Flake8-AAA and bad examples generate expected errors
labels = examples
deps =
    flake8>=4
commands =
    flake8 --version
    flake8 examples/good
    - bash -c "flake8 examples/bad/ | sort > {envtmpdir}/out"
    - bash -c "sort examples/bad/bad_expected.out > {envtmpdir}/expected_out"
    diff {envtmpdir}/out {envtmpdir}/expected_out

# --- Install ---
# Assert that plugin can be installed and run via flake8 in a clean venv.
# Flake8 is called with flake8-aaa installed to lint flake8-aaa's tests (dog
# fooding) Test requirements do not include flake8-aaa, latest version is
# installed by tox during testing.
[testenv:py3{7,8,9,10,11}-install]
description = Check plugin can be installed, use it to check our test suite
commands =
    flake8 --version
    flake8 tests

# --- Mappings for GitHub actions ---

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
